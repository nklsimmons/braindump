{% extends 'base.html.twig' %}

{% block title %}Note index{% endblock %}

{% block body %}

    <div id="app">

        <h1>Note index</h1>

        <div>
            <input v-model="noteInputText">
            <button @click="submitNote">Submit</button>
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Text</th>
                    <th>Tags</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="note in notes" :key="note.id">
                    <td>${ note.id }</td>
                    <td v-if="note.status === 'complete'" class="text-decoration-line-through">${ note.text }</td>
                    <td v-else>${ note.text }</td>
                    <td>
                        <button v-for="tag in note.tags">${ tag.text }</button>
                    </td>
                    <td>
                        <button v-if="note.status !== 'complete'" @click="markNoteComplete(note.id, true)" type="button">Mark as complete</button>
                        <button v-else @click="markNoteComplete(note.id, false)" type="button">Mark as incomplete</button>
                        <button @click="deleteNote(note.id)" type="button">Delete</button>
                        <button type="button" data-bs-toggle="modal" data-bs-target="#tagsModal"
                            @click="setTagsModalNote(note.id)">
                            Add Tag
                        </button>
                        <button type="button">Add Reminder</button>
                    </td>
                </tr>

                <tr v-if="notes.length == 0">
                    <td colspan="3">no records found</td>
                </tr>
            </tbody>
        </table>

        <h1>Tag index</h1>

        <div>
            <input v-model="tagInputText">
            <button @click="submitTag">Submit</button>
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Text</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="tag in tags" :key="tag.id">
                    <td>${ tag.id }</td>
                    <td>${ tag.text }</td>
                    <td>
                        <button @click="deleteTag(tag.id)" type="button">Delete</button>
                    </td>
                </tr>

                <tr v-if="tags.length == 0">
                    <td colspan="3">no records found</td>
                </tr>
            </tbody>
        </table>

        <div class="modal fade" id="tagsModal" tabindex="-1" aria-labelledby="tagsModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="tagsModalLabel" v-if="tagsModalActiveNote !== null">Add Tag to ${ tagsModalActiveNote.text }</h1>
                        <h1 class="modal-title fs-5" id="tagsModalLabel" v-else>Add Tag</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p v-for="tag in tagsModalTags">
                            <button @click="addNoteTag(tagsModalActiveNote.id, tag.text)">${ tag.text }</button>
                        </p>
                        <input type="text" v-model="tagsModalActiveInput">
                        <button type="button" @click="addNoteTag(tagsModalActiveNote.id, tagsModalActiveInput)">Submit</button>
                    </div>
                    <div class="modal-footer">
                        <button type="button" data-bs-dismiss="modal">Close</button>
                        <button type="button">Save changes</button>
                    </div>
                </div>
            </div>
        </div>

    </div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
const { createApp } = Vue

const app = createApp({
    data() {
        return {
            notes: [],
            tags: [],
            noteInputText: 'Potato',
            tagInputText: 'Tomato',

            // Tags Modal Content
            tagsModalTags: [],
            tagsModalActiveNote: null,
            tagsModalActiveInput: "",
        }
    },
    created() {
        this.fetchNotes()
        this.fetchTags()
    },
    methods: {
        fetchNotes() {
            fetch('/api/notes')
                .then(res => res.json())
                .then(notes => {
                    this.notes = notes
                })
        },
        fetchTags() {
            fetch('/api/tags')
                .then(res => res.json())
                .then(tags => {
                    this.tags = tags
                    this.tagsModalTags = tags
                })
        },
        submitNote() {
            const body = {
                text: this.noteInputText,
                status: '',
                userId: 1
            }
            const headers = {
                "Accept": "application/json",
                "Content-Type": "application/json"
            }
            fetch('/api/notes', {
                method: "POST",
                headers,
                body: JSON.stringify(body)
            })
                .then(res => res.json())
                .then(() => {
                    this.fetchNotes()
                })
                .catch(err => console.log(err))
        },
        submitTag() {
            const body = {
                text: this.tagInputText,
                status: '',
                userId: 1
            }
            const headers = {
                "Accept": "application/json",
                "Content-Type": "application/json"
            }
            fetch('/api/tags', {
                method: "POST",
                headers,
                body: JSON.stringify(body)
            })
                .then(() => {
                    this.fetchTags()
                })
                .catch(err => console.log(err))
        },
        markNoteComplete(noteId, completeStatus) {
            const body = {
                status: completeStatus ? 'complete' : '',
            }
            const headers = {
                "Accept": "application/json",
                "Content-Type": "application/merge-patch+json"
            }
            fetch('/api/notes/'+noteId, {
                method: "PATCH",
                headers,
                body: JSON.stringify(body)
            })
                .then(() => {
                    this.fetchNotes()
                })
                .catch(err => console.log(err))
        },
        addNoteTag(noteId, tag) {
            const body = {
                noteId, tag
            }
            const headers = {
                "Accept": "application/json",
                "Content-Type": "multipart/form-data"
            }
            fetch('/api/notes/'+noteId+'/tags', {
                method: "POST",
                headers,
                body: JSON.stringify(body)
            })
                .then(() => {
                    this.fetchNotes()
                    this.fetchTags()
                })
                .catch(err => console.log(err))
        },
        deleteNote(noteId) {
            if(!confirm("Are you sure you want to delete?")) return
            const headers = {
                "Accept": "*/*",
            }
            fetch('/api/notes/'+noteId, {
                method: "DELETE",
                headers
            })
                .then(() => {
                    this.fetchNotes()
                    this.fetchTags()
                })
                .catch(err => console.log(err))
        },
        deleteTag(tagId) {
            if(!confirm("Are you sure you want to delete?")) return
            const headers = {
                "Accept": "*/*",
            }
            fetch('/api/tags/'+tagId, {
                method: "DELETE",
                headers
            })
                .then(() => {
                    this.fetchNotes()
                    this.fetchTags()
                })
                .catch(err => console.log(err))
        },
        setTagsModalNote(noteId) {
            for(const note of this.notes) {
                if(note.id === noteId) {
                    this.tagsModalActiveNote = note
                    break
                }
            }
        }
    },
    delimiters: ['${', '}']
})
app.mount('#app')

</script>

{% endblock %}
